#!/usr/bin/env ruby

require 'pry'
require 'praat'
require 'nmatrix'
require 'json'

vowelgrid_filename = ARGV[0]
formant_filename = ARGV[1]
output_filename = ARGV[2]
range = ARGV[3]

begin
  vowelgrid = Praat.parse_file vowelgrid_filename
  formants = Praat.parse_file formant_filename

  vowels = vowelgrid.items[0].intervalss.select(&:has_text?)
  range = Range.new(*(/(\d+)..(\d+)/.match(range)[1..2].map(&:to_i)))

  # Create an Array with each formant segment
  vowel_formants = vowels.map {|vowel|
    vowel.extract_formant(formants)
  }

  # Returns a pair: [num_frames, NMatrix_fit]
  formant_lines = vowel_formants.map {|vowel_formant|
    vowel_formant.least_squares_formant
  }

  formant_offsets = formant_lines.map {|f|
    f[1].col(0).to_a.flatten
  }.to_nm

  formant_slopes = formant_lines.map {|f|
    f[1].col(1).to_a.flatten
  }.to_nm

  scaling = -> (matrix, sym) {
    NMatrix.new(matrix.shape, matrix.send(sym).to_a, dtype: :float64)
  }

  offset_mins = scaling.call(formant_offsets, :min)
  offset_maxes = scaling.call(formant_offsets, :max)
  offset_ranges = offset_maxes - offset_mins

  slope_mins = scaling.call(formant_slopes, :min)
  slope_maxes = scaling.call(formant_slopes, :max)
  slope_ranges = slope_maxes - slope_mins

  scaled_offsets = (formant_offsets - offset_mins) / offset_ranges
  scaled_slopes = (formant_slopes - slope_mins) / slope_ranges

  notenames = ["f", "g", "a", "b", "c'", "d'", "e'", "f'", "g'"].reverse
  quantizer = ->(offset) { (offset * 8).round } 

  formant_repeats = range.map do |i|
    slopes = scaled_slopes.dup * Math.cos((Math::PI / 30.0) * i)
    offsets = scaled_offsets.dup

    repeats = offsets.to_a.zip(slopes.to_a, formant_lines).map do |offset, slope, lines|
      quant_offset = offset.map(&quantizer)
      quant_slope = slope.map {|r| r.round(1)}
      lily_offset = quant_offset.map {|r| notenames[r]}
      num_frames = lines[0]
      destination = quant_slope.map {|qs| (qs * num_frames * -3.0 / 70.0).round(1).to_s}

      # Each element is a hash:
      {
        :offset => offset,
        :slope => slope,
        :quant_offset => quant_offset,
        :quant_slope => quant_slope,
        :lily_offset => lily_offset,
        :num_frames => num_frames,
        :destination => destination
      }
    end
  end

  # Save to a file
  File.open output_filename, "w" do |f|
    f.puts JSON.pretty_generate(formant_repeats)
  end
rescue
  binding.pry
end

